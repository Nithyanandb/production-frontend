{"version":3,"file":"SellStocks-fsvwYEaR.js","sources":["../../../src/components/pages/SellStocks/SellModal.tsx","../../../src/components/pages/SellStocks/StockChart.tsx","../../../src/components/pages/SellStocks/StockDetail.tsx","../../../src/components/portfolio/Portfolio.ts","../../../src/components/pages/SellStocks/SellStocks.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\ninterface SellModalProps {\r\n  stock: {\r\n    symbol: string;\r\n    quantity: number; // Add quantity to the stock interface\r\n  };\r\n  onClose: () => void;\r\n  onSuccess: (symbol: string, quantity: number) => void; // Update onSuccess to accept symbol and quantity\r\n}\r\n\r\nconst SellModal: React.FC<SellModalProps> = ({ stock, onClose, onSuccess }) => {\r\n  const [quantity, setQuantity] = useState<number>(0);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const handleSell = () => {\r\n    // Validate the quantity\r\n    if (quantity <= 0) {\r\n      setError('Quantity must be greater than 0.');\r\n      return;\r\n    }\r\n\r\n    if (quantity > stock.quantity) {\r\n      setError('Quantity exceeds available shares.');\r\n      return;\r\n    }\r\n\r\n    // Clear any previous errors\r\n    setError(null);\r\n\r\n    // Call the onSuccess callback with the symbol and quantity\r\n    onSuccess(stock.symbol, quantity);\r\n\r\n    // Close the modal\r\n    onClose();\r\n  };\r\n\r\n  return (\r\n    <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\r\n      <div className=\"bg-black rounded-xl p-8 w-96\">\r\n        <h2 className=\"text-xl font-bold mb-4\">Sell {stock.symbol}</h2>\r\n        <p className=\"text-gray-400 mb-6\">Enter the quantity you want to sell (in rupees).</p>\r\n        <input\r\n          type=\"number\"\r\n          placeholder=\"Quantity\"\r\n          value={quantity}\r\n          onChange={(e) => setQuantity(Number(e.target.value))}\r\n          className=\"w-full bg-white/5 border border-white/10 rounded-xl px-4 py-3 mb-6 focus:outline-none focus:ring-2 focus:ring-white/20\"\r\n        />\r\n        {error && (\r\n          <p className=\"text-red-500 text-sm mb-4\">{error}</p>\r\n        )}\r\n        <div className=\"flex justify-end gap-4\">\r\n          <button\r\n            onClick={onClose}\r\n            className=\"px-6 py-2 bg-white/10 rounded-xl hover:bg-white/20 transition-all\"\r\n          >\r\n            Cancel\r\n          </button>\r\n          <button\r\n            onClick={handleSell}\r\n            className=\"px-6 py-2 bg-red-500 rounded-xl hover:bg-red-600 transition-all\"\r\n          >\r\n            Sell\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SellModal;","import React, { useState, useEffect } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport {\r\n  AreaChart, Area, XAxis, YAxis, Tooltip, ResponsiveContainer,\r\n  CartesianGrid\r\n} from 'recharts';\r\n\r\ninterface StockChartProps {\r\n  symbol: string;\r\n  onTimeframeChange?: (timeframe: string) => void;\r\n  basePrice?: number; // Optional base price for the stock\r\n}\r\n\r\ninterface StockDataPoint {\r\n  date: string;\r\n  price: number;\r\n}\r\n\r\nconst generateRandomPrice = (basePrice: number, volatility: number = 0.005): number => {\r\n  const change = basePrice * volatility * (Math.random() - 0.5);\r\n  return basePrice + change;\r\n};\r\n\r\nconst generateStockData = (timeframe: string, basePrice: number = 100): StockDataPoint[] => {\r\n  const dataPoints: StockDataPoint[] = [];\r\n  const periods = {\r\n    '1D': 24,\r\n    '1W': 7 * 24,\r\n    '1M': 30,\r\n    '3M': 90,\r\n    '1Y': 252,\r\n    '5Y': 1260\r\n  }[timeframe] || 24;\r\n\r\n  let currentPrice = basePrice;\r\n  const now = new Date();\r\n\r\n  for (let i = 0; i < periods; i++) {\r\n    const date = new Date(now);\r\n    \r\n    if (timeframe === '1D' || timeframe === '1W') {\r\n      date.setHours(date.getHours() - i);\r\n    } else {\r\n      date.setDate(date.getDate() - i);\r\n    }\r\n\r\n    currentPrice = generateRandomPrice(currentPrice);\r\n\r\n    dataPoints.unshift({\r\n      date: date.toISOString(),\r\n      price: Number(currentPrice.toFixed(2))\r\n    });\r\n  }\r\n\r\n  return dataPoints;\r\n};\r\n\r\nexport const StockChart: React.FC<StockChartProps> = ({ \r\n  symbol, \r\n  onTimeframeChange,\r\n  basePrice: initialBasePrice = 100 // Default base price\r\n}) => {\r\n  const [timeframe, setTimeframe] = useState('1D');\r\n  const [stockData, setStockData] = useState<StockDataPoint[]>([]);\r\n\r\n  // Generate data based on symbol\r\n  const basePrice = {\r\n    'AAPL': 150,\r\n    'MSFT': 380,\r\n    'GOOGL': 140,\r\n    'TSLA': 250,\r\n    'NVDA': 800\r\n  }[symbol] || initialBasePrice;\r\n\r\n  useEffect(() => {\r\n    const data = generateStockData(timeframe, basePrice);\r\n    setStockData(data);\r\n  }, [timeframe, basePrice]);\r\n\r\n  const handleTimeframeChange = (tf: string) => {\r\n    setTimeframe(tf);\r\n    onTimeframeChange?.(tf);\r\n  };\r\n\r\n  const priceChange = stockData.length > 0 ? stockData[stockData.length - 1].price - stockData[0].price : 0;\r\n  const priceChangePercent = stockData.length > 0 ? ((priceChange / stockData[0].price) * 100).toFixed(2) : '0.00';\r\n\r\n  const timeframes = ['1D', '1W', '1M', '3M', '1Y', '5Y'];\r\n\r\n  return (\r\n    <motion.div\r\n      key={symbol}\r\n      initial={{ opacity: 0, y: 0 }}\r\n      animate={{ opacity: 1, y: 0 }}\r\n      className=\"relative h-[400px] bg-black/40 backdrop-blur-xl rounded-2xl p-6\"\r\n    >\r\n      {/* Header with price change */}\r\n      <div className=\"flex items-center justify-between mb-6\">\r\n        <div>\r\n          <h3 className=\"text-xl font-medium text-white\">{symbol}</h3>\r\n          <div className={`text-sm ${priceChange >= 0 ? 'text-green-400' : 'text-red-400'}`}>\r\n            {priceChange >= 0 ? '+' : ''}{priceChangePercent}%\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Timeframe selector */}\r\n        <div className=\"flex gap-2\">\r\n          {timeframes.map((tf) => (\r\n            <button\r\n              key={tf}\r\n              onClick={() => handleTimeframeChange(tf)}\r\n              className={`px-3 py-1 rounded-full text-sm transition-all ${\r\n                timeframe === tf \r\n                  ? 'bg-white/10 text-white' \r\n                  : 'text-white/60 hover:text-white'\r\n              }`}\r\n            >\r\n              {tf}\r\n            </button>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Chart */}\r\n      <ResponsiveContainer width=\"100%\" height=\"100%\">\r\n        <AreaChart data={stockData}>\r\n          <defs>\r\n            <linearGradient id=\"colorPrice\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n              <stop offset=\"5%\" stopColor=\"#60A5FA\" stopOpacity={0.3}/>\r\n              <stop offset=\"95%\" stopColor=\"#60A5FA\" stopOpacity={0}/>\r\n            </linearGradient>\r\n          </defs>\r\n          \r\n          <CartesianGrid\r\n            strokeDasharray=\"3 3\"\r\n            stroke=\"rgba(255,255,255,0.1)\"\r\n            vertical={false}\r\n          />\r\n          \r\n          <XAxis\r\n            dataKey=\"date\"\r\n            tickFormatter={(date) => {\r\n              const d = new Date(date);\r\n              if (timeframe === '1D') {\r\n                return d.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\r\n              } else {\r\n                return d.toLocaleDateString([], { day: 'numeric', month: 'short' });\r\n              }\r\n            }}\r\n            stroke=\"rgba(255,255,255,0.5)\"\r\n            tick={{ fill: 'rgba(255,255,255,0.5)', fontSize: 12 }}\r\n          />\r\n          \r\n          <YAxis\r\n            domain={['auto', 'auto']}\r\n            stroke=\"rgba(255,255,255,0.5)\"\r\n            tick={{ fill: 'rgba(255,255,255,0.5)', fontSize: 12 }}\r\n            tickFormatter={(value) => `$${value}`}\r\n          />\r\n          \r\n          <Tooltip\r\n            contentStyle={{\r\n              backgroundColor: 'rgba(0,0,0,0.9)',\r\n              border: 'none',\r\n              backdropFilter: 'blur(10px)',\r\n              padding: '12px',\r\n              borderRadius: '8px'\r\n            }}\r\n            labelFormatter={(date) => new Date(date).toLocaleString()}\r\n          />\r\n          \r\n          <Area\r\n            type=\"monotone\"\r\n            dataKey=\"price\"\r\n            stroke=\"#60A5FA\"\r\n            fill=\"url(#colorPrice)\"\r\n            strokeWidth={2}\r\n          />\r\n        </AreaChart>\r\n      </ResponsiveContainer>\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default StockChart;","import React, { useState, useEffect } from 'react';\r\nimport { ArrowUp, ArrowDown, Clock, TrendingUp, BarChart2, Activity, Globe } from 'lucide-react';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport StockChart from './StockChart';\r\n\r\ninterface StockDetailProps {\r\n  stock: Portfolio | null;\r\n  onSellClick: (stock: Portfolio) => void;\r\n  loading?: boolean;\r\n}\r\n\r\nconst StockDetail: React.FC<StockDetailProps> = ({ stock, onSellClick, loading }) => {\r\n  const [timeFrame, setTimeFrame] = useState<string>('1D');\r\n  const [currentTime, setCurrentTime] = useState(new Date());\r\n  const [recommendationTrends, setRecommendationTrends] = useState<any[]>([]);\r\n  const [trendsLoading, setTrendsLoading] = useState<boolean>(false);\r\n\r\n  // Update current time every second\r\n  useEffect(() => {\r\n    const timer = setInterval(() => {\r\n      setCurrentTime(new Date());\r\n    }, 1000);\r\n    return () => clearInterval(timer);\r\n  }, []);\r\n\r\n  if (loading || !stock) {\r\n    return (\r\n      <div className=\"h-full flex items-center justify-center text-white/60\">\r\n        <div className=\"text-center\">\r\n          <Globe size={48} className=\"mx-auto mb-4 opacity-60\" />\r\n          <p className=\"text-xl\">Select a stock to view details</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  const timeFrames = ['1D', '1W', '1M', '3M', '1Y', 'ALL'];\r\n\r\n  // Color scheme for recommendation trends\r\n  const trendColors = {\r\n    strongBuy: '#16a34a', // Bright green\r\n    buy: '#4ade80',      // Light green\r\n    hold: '#facc15',     // Yellow\r\n    sell: '#f87171',     // Light red\r\n    strongSell: '#dc2626', // Bright red\r\n  };\r\n\r\n  return (\r\n    <AnimatePresence mode=\"wait\">\r\n      <motion.div\r\n        initial={{ opacity: 0, y: 20 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        exit={{ opacity: 0, y: -20 }}\r\n        className=\"flex flex-col h-full bg-black/40 backdrop-blur-xl p-4 lg:p-6\"\r\n      >\r\n        {/* Compact Header */}\r\n        <div className=\"flex items-center justify-between mb-2\">\r\n          <div>\r\n            <h1 className=\"text-2xl font-semibold text-white\">{stock.name}</h1>\r\n            <div className=\"flex items-center gap-2 text-sm\">\r\n              <span className=\"text-white/60\">{stock.symbol}</span>\r\n              <span className=\"text-white/60\">•</span>\r\n              <span className=\"text-white/60\">{currentTime.toLocaleTimeString()}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Compact Price Section */}\r\n        <div className=\"flex items-center gap-4 mb-4\">\r\n          <span className=\"text-4xl font-medium\">\r\n            ${stock.currentPrice?.toFixed(2) || 'N/A'}\r\n          </span>\r\n          <motion.span\r\n            animate={{\r\n              color: (stock.totalReturn || 0) >= 0 ? \"rgb(34, 197, 94)\" : \"rgb(239, 68, 68)\"\r\n            }}\r\n            className=\"flex items-center text-lg\"\r\n          >\r\n            {(stock.totalReturn || 0) >= 0 ? <ArrowUp size={20} /> : <ArrowDown size={20} />}\r\n            {Math.abs(stock.totalReturn || 0).toFixed(2)}%\r\n          </motion.span>\r\n        </div>\r\n\r\n        {/* Compact Time Frame Selector */}\r\n        <div className=\"flex gap-1 mb-4 overflow-x-auto scrollbar-hide\">\r\n          {timeFrames.map((tf) => (\r\n            <button\r\n              key={tf}\r\n              onClick={() => setTimeFrame(tf)}\r\n              className={`px-3 py-1 rounded-full text-xs font-medium transition-all whitespace-nowrap ${\r\n                timeFrame === tf\r\n                  ? 'bg-white text-black'\r\n                  : 'bg-white/10 text-white/60 hover:bg-white/20'\r\n              }`}\r\n            >\r\n              {tf}\r\n            </button>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Chart Container */}\r\n        <div className=\"flex-1 bg-black/20 rounded-xl p-4 backdrop-blur-sm mb-4\">\r\n          <div className=\"h-full\">\r\n            <StockChart stock={stock} timeFrame={timeFrame} />\r\n          </div>\r\n        </div>\r\n\r\n        {/* Compact Stats Grid */}\r\n        <div className=\"grid grid-cols-3 gap-3 mb-6\">\r\n          {[\r\n            { icon: <Activity size={16} />, label: 'Volume', value: (stock.volume || 0).toLocaleString() },\r\n            { icon: <TrendingUp size={16} />, label: 'High', value: `₹${(stock.high || 0).toFixed(2)}` },\r\n            { icon: <BarChart2 size={16} />, label: 'Low', value: `₹${(stock.low || 0).toFixed(2)}` }\r\n          ].map((stat, index) => (\r\n            <div key={index} className=\"bg-white/5 backdrop-blur-sm rounded-xl p-3\">\r\n              <div className=\"flex items-center gap-1 text-white/60 mb-1 text-xs\">\r\n                {stat.icon}\r\n                <span className=\"font-medium\">{stat.label}</span>\r\n              </div>\r\n              <p className=\"text-lg font-medium truncate\">{stat.value}</p>\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        {/* Recommendation Trends Section */}\r\n        <div className=\"bg-black/20 rounded-xl p-4 backdrop-blur-sm\">\r\n          <h3 className=\"text-lg font-semibold text-white mb-4\">Recommendation Trends</h3>\r\n          {trendsLoading ? (\r\n            <div className=\"flex justify-center items-center py-4\">\r\n              <span className=\"text-white/60\">Loading trends...</span>\r\n            </div>\r\n          ) : recommendationTrends.length > 0 ? (\r\n            <div className=\"space-y-4\">\r\n              {recommendationTrends.map((trend, index) => (\r\n                <div key={index} className=\"bg-white/5 rounded-xl p-3\">\r\n                  <p className=\"text-sm text-white/60 mb-2\">Period: {trend.period}</p>\r\n                  <div className=\"grid grid-cols-5 gap-2\">\r\n                    <div className=\"text-center\">\r\n                      <p className=\"text-xs text-white/60\">Strong Buy</p>\r\n                      <p className=\"text-lg font-medium\" style={{ color: trendColors.strongBuy }}>\r\n                        {trend.strongBuy}\r\n                      </p>\r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                      <p className=\"text-xs text-white/60\">Buy</p>\r\n                      <p className=\"text-lg font-medium\" style={{ color: trendColors.buy }}>\r\n                        {trend.buy}\r\n                      </p>\r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                      <p className=\"text-xs text-white/60\">Hold</p>\r\n                      <p className=\"text-lg font-medium\" style={{ color: trendColors.hold }}>\r\n                        {trend.hold}\r\n                      </p>\r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                      <p className=\"text-xs text-white/60\">Sell</p>\r\n                      <p className=\"text-lg font-medium\" style={{ color: trendColors.sell }}>\r\n                        {trend.sell}\r\n                      </p>\r\n                    </div>\r\n                    <div className=\"text-center\">\r\n                      <p className=\"text-xs text-white/60\">Strong Sell</p>\r\n                      <p className=\"text-lg font-medium\" style={{ color: trendColors.strongSell }}>\r\n                        {trend.strongSell}\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <div className=\"flex justify-center items-center py-4\">\r\n              <span className=\"text-white/60\">No recommendation trends available.</span>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </motion.div>\r\n    </AnimatePresence>\r\n  );\r\n};\r\n\r\nexport default StockDetail;","import { ReactNode } from \"react\";\r\n\r\nexport interface Portfolio {\r\n  quantity: number;\r\n  id: number;\r\n  symbol: string;\r\n  name: string;\r\n  shares: number;\r\n  value: number;\r\n  change: number;\r\n  averagePrice: number;\r\n  currentPrice: number;\r\n  totalReturn: number;\r\n  purchaseDate: string;\r\n}\r\n\r\nexport interface PortfolioStats {\r\n  dailyPerformance: Array<{\r\n    date: string;\r\n    value: number;\r\n  }>;\r\n  totalInvestment: number;\r\n}\r\n\r\nexport interface ApiResponse<T> {\r\n  success: boolean;\r\n  data: T;\r\n}\r\n\r\nexport interface Transaction {\r\n  id: number;\r\n  symbol: string;\r\n  type: 'BUY' | 'SELL';\r\n  quantity: number;\r\n  price: number;\r\n  totalAmount: number;\r\n  date: string;\r\n  status: string;\r\n}\r\n\r\n\r\nexport interface PortfolioHolding {\r\n  name: ReactNode;\r\n\r\n  symbol: string;\r\n\r\n  quantity: number;\r\n\r\n  averagePrice: number;\r\n\r\n  currentPrice: number;\r\n\r\n  marketValue?: number;\r\n\r\n  totalReturn?: number;\r\n\r\n}\r\n\r\n\r\nexport interface DailyPerformance {\r\n  date: string;\r\n  value: number;\r\n  change: number;\r\n}\r\n\r\nexport interface PortfolioAction {\r\n  id: string;\r\n  type: 'BUY' | 'SELL';\r\n  symbol: string;\r\n  quantity: number;\r\n  price: number;\r\n  timestamp: string;\r\n}\r\n\r\nexport const formatMoney = (value: number): string => {\r\n\r\n  return new Intl.NumberFormat('en-US', {\r\n\r\n    style: 'currency',\r\n\r\n    currency: 'USD'\r\n\r\n  }).format(value);\r\n\r\n};\r\n\r\n\r\n\r\nexport const formatPercent = (value: number): string => {\r\n\r\n  return new Intl.NumberFormat('en-US', {\r\n\r\n    style: 'percent',\r\n\r\n    minimumFractionDigits: 2,\r\n\r\n    maximumFractionDigits: 2\r\n\r\n  }).format(value / 100);\r\n\r\n};\r\n\r\nexport interface LoginActivityData {\r\n  date: string;\r\n  count: number;\r\n  details?: {\r\n    browser: string;\r\n    platform: string;\r\n    location?: string;\r\n  };\r\n}\r\n\r\nexport interface ActivityStats {\r\n  totalLogins: number;\r\n  averagePerDay: number;\r\n  mostActiveDay: {\r\n    date: string;\r\n    count: number;\r\n  };\r\n  lastSevenDays: {\r\n    dates: string[];\r\n    counts: number[];\r\n  };\r\n}","import React, { useState, useEffect } from 'react';\r\nimport { Search, ArrowUp, ArrowDown, Globe, DollarSign, Check } from 'lucide-react';\r\nimport SellModal  from './SellModal';\r\nimport { motion, AnimatePresence } from 'framer-motion';\r\nimport Header from '@/components/Header/Header';\r\nimport LoadingSpinner from '../../ui/LoadingSpinner';\r\nimport  useAuth from '@/components/hooks/useAuth';\r\nimport  StockDetail from './StockDetail';\r\nimport PortfolioTable  from '../../portfolio/PortfolioTable';\r\nimport { formatMoney, formatPercent, Portfolio } from '@/components/portfolio/Portfolio';\r\n\r\nexport const SellStocks: React.FC = () => {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedStock, setSelectedStock] = useState<Portfolio | null>(null);\r\n  const [selectedStockDetail, setSelectedStockDetail] = useState<Portfolio | null>(null);\r\n  const [showSuccessPopup, setShowSuccessPopup] = useState(false);\r\n  const [portfolio, setPortfolio] = useState<Portfolio[]>([]); // Initialize as an array\r\n  const { user, token } = useAuth();\r\n\r\n  // Fetch portfolio data on component mount\r\n  useEffect(() => {\r\n    const fetchPortfolio = async () => {\r\n      try {\r\n        const response = await fetch('http://localhost:2000/portfolio', {\r\n          method: 'GET',\r\n          headers: {\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        });\r\n\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch portfolio');\r\n        }\r\n\r\n        const { data } = await response.json();\r\n        console.log('Backend Response:', data); // Debugging\r\n\r\n        // Validate portfolio data\r\n        if (Array.isArray(data)) {\r\n          const validPortfolio = data.filter(\r\n            (holding) => holding?.symbol && holding?.name\r\n          );\r\n          setPortfolio(validPortfolio);\r\n        } else {\r\n          throw new Error('Invalid portfolio data format');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching portfolio:', error);\r\n        setError('Failed to load portfolio');\r\n        setPortfolio([]); // Reset portfolio to an empty array in case of error\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    fetchPortfolio();\r\n  }, [token]);\r\n\r\n  const handleTransactionSuccess = () => {\r\n    setShowSuccessPopup(true);\r\n    setTimeout(() => {\r\n      setShowSuccessPopup(false);\r\n    }, 3000);\r\n  };\r\n\r\n  const handleStockSelect = (stock: Portfolio) => {\r\n    setSelectedStockDetail(stock);\r\n  };\r\n\r\n  const handleSell = async (symbol: string, quantity: number) => {\r\n    try {\r\n      const response = await fetch('http://localhost:2000/transaction/sell', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n        body: JSON.stringify({\r\n          stockSymbol: symbol,\r\n          quantity,\r\n          price: selectedStockDetail?.currentPrice || 0,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.message || 'Failed to process transaction');\r\n      }\r\n\r\n      // Update the portfolio after selling\r\n      setPortfolio((prevPortfolio) =>\r\n        prevPortfolio.map((holding) => {\r\n          if (holding.symbol === symbol) {\r\n            const newQuantity = holding.quantity - quantity;\r\n            return { ...holding, quantity: newQuantity };\r\n          }\r\n          return holding;\r\n        }).filter((holding) => holding.quantity > 0) // Remove stocks with 0 quantity\r\n      );\r\n\r\n      handleTransactionSuccess();\r\n    } catch (error) {\r\n      console.error('Sell transaction failed:', error);\r\n      setError('Failed to sell stock');\r\n    }\r\n  };\r\n\r\n  // Filter portfolio based on search term\r\n  const filteredPortfolio = (Array.isArray(portfolio) ? portfolio : []).filter(\r\n    (holding) =>\r\n      holding?.symbol?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      holding?.name?.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-br from-zinc-900 to-black text-white\">\r\n      <Header />\r\n      <div>\r\n        <div className=\"mt-32 absolute flex z-20 px-8 justify-end w-full\">\r\n          {selectedStockDetail && (\r\n            <button\r\n              onClick={() => setSelectedStock(selectedStockDetail)}\r\n              className=\"px-8 py-3 bg-white text-black font-medium rounded-full hover:bg-white/90 transition-all flex items-center gap-2\"\r\n            >\r\n              <DollarSign size={20} />\r\n              Sell {selectedStockDetail.symbol}\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex h-screen pt-20\">\r\n        {/* Sidebar */}\r\n        <div className=\"w-98 bg-black/30 border-r border-white/10 overflow-hidden\">\r\n          <div className=\"p-6\">\r\n            <div className=\"relative mb-6\">\r\n              <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-white/40\" size={20} />\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Search stocks...\"\r\n                value={searchTerm}\r\n                onChange={(e) => setSearchTerm(e.target.value)}\r\n                className=\"w-full bg-white/5 border border-white/10 rounded-2xl pl-12 pr-4 py-3 text-base focus:outline-none focus:ring-2 focus:ring-white/20\"\r\n              />\r\n            </div>\r\n\r\n            {/* Portfolio List */}\r\n            <div className=\"space-y-4 overflow-y-auto w-[400px] h-[calc(100vh-200px)]\">\r\n              {loading ? (\r\n                <LoadingSpinner />\r\n              ) : (\r\n                filteredPortfolio.map((holding) => (\r\n                  <motion.div\r\n                    key={holding.symbol}\r\n                    layout\r\n                    className={`p-4 rounded-xl cursor-pointer transition-all ${\r\n                      selectedStockDetail?.symbol === holding.symbol\r\n                        ? 'bg-white/10'\r\n                        : 'bg-black/20 hover:bg-white/5'\r\n                    }`}\r\n                    onClick={() => handleStockSelect(holding)}\r\n                  >\r\n                    <div className=\"flex justify-between items-start\">\r\n                      <div>\r\n                        <h3 className=\"font-medium\">{holding.symbol}</h3>\r\n                        <p className=\"text-sm text-white/60\">{holding.name}</p>\r\n                      </div>\r\n                      <motion.div\r\n                        animate={{\r\n                          color: (holding.totalReturn || 0) >= 0 ? '#34D399' : '#EF4444',\r\n                        }}\r\n                        className=\"text-right\"\r\n                      >\r\n                        <p className=\"font-medium\">{formatMoney(holding.currentPrice)}</p>\r\n                        <p className=\"text-sm flex items-center gap-1\">\r\n                          {(holding.totalReturn !== undefined) && (\r\n                            <>\r\n                              {(holding.totalReturn >= 0) ? <ArrowUp size={12} /> : <ArrowDown size={12} />}\r\n                              {formatPercent(Math.abs(holding.totalReturn))}\r\n                            </>\r\n                          )}\r\n                        </p>\r\n                      </motion.div>\r\n                    </div>\r\n                  </motion.div>\r\n                ))\r\n              )}\r\n            </div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Main Content */}\r\n        <div className=\"flex-1 overflow-y-auto\">\r\n          {selectedStockDetail ? (\r\n            <StockDetail\r\n              stock={selectedStockDetail}\r\n              onSellClick={setSelectedStock}\r\n              loading={loading}\r\n            />\r\n          ) : (\r\n            <div className=\"h-full flex items-center justify-center text-white/60\">\r\n              <div className=\"text-center\">\r\n                <Globe size={48} className=\"mx-auto mb-4 opacity-60\" />\r\n                <p className=\"text-xl\">Select a stock to view details</p>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Portfolio Table */}\r\n      <div className=\"p-8\">\r\n        <h2 className=\"text-xl font-bold mb-4\">Your Portfolio</h2>\r\n        <PortfolioTable data={portfolio} />\r\n      </div>\r\n\r\n      <AnimatePresence>\r\n        {showSuccessPopup && (\r\n          <motion.div\r\n            initial={{ opacity: 0, y: 50 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: -50 }}\r\n            className=\"fixed bottom-8 right-8 z-50\"\r\n          >\r\n            <div className=\"bg-green-500 text-white px-6 py-4 rounded-xl shadow-xl flex items-center gap-3\">\r\n              <div className=\"bg-white/20 rounded-full p-1\">\r\n                <Check className=\"w-4 h-4\" />\r\n              </div>\r\n              <span>Transaction completed successfully!</span>\r\n            </div>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n\r\n      {/* Sell Modal */}\r\n      {selectedStock && (\r\n        <SellModal\r\n          stock={selectedStock}\r\n          onClose={() => setSelectedStock(null)}\r\n          onSuccess={handleSell}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SellStocks;"],"names":["SellModal","stock","onClose","onSuccess","quantity","setQuantity","useState","error","setError","className","children","jsxs","symbol","jsx","jsxRuntimeExports","type","placeholder","value","onChange","e","Number","target","onClick","generateRandomPrice","basePrice","volatility","Math","random","StockChart","onTimeframeChange","initialBasePrice","timeframe","setTimeframe","stockData","setStockData","AAPL","MSFT","GOOGL","TSLA","NVDA","useEffect","data","dataPoints","periods","currentPrice","now","Date","i","date","setHours","getHours","setDate","getDate","unshift","toISOString","price","toFixed","generateStockData","priceChange","length","priceChangePercent","motion","div","initial","opacity","y","animate","map","tf","handleTimeframeChange","ResponsiveContainer","width","height","AreaChart","id","x1","y1","x2","y2","offset","stopColor","stopOpacity","CartesianGrid","strokeDasharray","stroke","vertical","XAxis","dataKey","tickFormatter","d","toLocaleTimeString","hour","minute","toLocaleDateString","day","month","tick","fill","fontSize","YAxis","domain","Tooltip","contentStyle","backgroundColor","border","backdropFilter","padding","borderRadius","labelFormatter","toLocaleString","Area","strokeWidth","StockDetail","onSellClick","loading","timeFrame","setTimeFrame","currentTime","setCurrentTime","recommendationTrends","setRecommendationTrends","trendsLoading","setTrendsLoading","timer","setInterval","clearInterval","Globe","size","trendColors","AnimatePresence","mode","exit","name","_a","span","color","totalReturn","ArrowUp","ArrowDown","abs","icon","Activity","label","volume","TrendingUp","high","BarChart2","low","stat","index","trend","period","style","strongBuy","buy","hold","sell","strongSell","formatPercent","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","SellStocks","setLoading","searchTerm","setSearchTerm","selectedStock","setSelectedStock","selectedStockDetail","setSelectedStockDetail","showSuccessPopup","setShowSuccessPopup","portfolio","setPortfolio","user","token","useAuth","async","response","fetch","method","headers","Authorization","ok","Error","json","console","log","Array","isArray","validPortfolio","filter","holding","fetchPortfolio","filteredPortfolio","toLowerCase","includes","_b","Header","DollarSign","Search","LoadingSpinner","layout","currency","Fragment","PortfolioTable","Check","body","JSON","stringify","stockSymbol","errorData","message","prevPortfolio","newQuantity","setTimeout"],"mappings":"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"}